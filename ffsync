#!/bin/bash

# Author:   anton@semjonov.de
# Date:     january 2016

export _listfile="list"
export _hostfile="host"
export _beVerbose="no"

timestamp() { echo "$(date +%F--%H-%M-%S-%Z)"; } ## echo timestamp like: 2016-01-12--00-36-10-CET
export tarball="ffsync-$(timestamp).tar.gz"

waitkey() { local void; read -rsp $'Press any key to continue...\n' -n1 void; } ## wait on any keypress ..
verbose() { test "$_beVerbose" = "yes"; } ## test wether to be verbose?
boldfont() { echo -en "\e[1m$@\e[0m"; } ## output arguments in bold font
yesno () { echo -n " (y/n)? " ## POSIX-compliant yes/no?
    old_stty_cfg=$(stty -g); stty raw -echo
    answer=$( while ! head -c 1 | grep -i '[ny]' ; do true ; done )
    stty $old_stty_cfg
    if echo "$answer" | grep -iq "^y" ; then echo yes; return 0
    else echo no; return 1; fi
}


cat_the_crap() {
    test "$1" != "" && test -f "$1" || return 0
    cat "$1" | sed 's/#.*$//' | xargs
}

get_filelist() {
    export filelist="$(cat_the_crap $_listfile)"
    verbose && boldfont "building file list from $_listfile...\n" && echo -e "$filelist\n" && waitkey
}

get_host() {
    test "$host" != "" && return 0
    export host="$(cat_the_crap $_hostfile)"
    verbose && boldfont "getting host ... " && echo $host && waitkey
}

modeselektor() {
    export mode="$1" && shift

    case "$mode" in
        push    )   parseargs $@ && debugoptions ;;
        pull    )   parseargs $@ && debugoptions ;;
        init    )   init_syncdir ;;
        *       )   howdoiturnthison ;;
    esac
}

howdoiturnthison() {
    echo "Use some cheats? I don't know ..."
}

parseargs() {
# define beforehand: >$ export parser_optlist=(1:one 2:two 3*three)
# where each option is: [X]{:/*}[...]
#       X   - option to look for
#       :/* - :additional argument or *only boolean
#       ... - name of variable to save to
#
# >$ parseargs -3 -1 "First Option" -2 SECOND
# .. would save "true" into a variable 'three', "First Option" into 'one'
#    and "SECOND" into 'two' when using above parser_optlist
    
    export parser_optlist=(h:host l:_listfile d:fsdirectory)

    for item in ${parser_optlist[@]}; do
        argument+=("$(echo $item | cut -c -2 | sed 's/*//')")
        variable+=("$(echo $item | cut -c 3-)")
    done; OPTIND=1;

    while getopts "$(echo ${argument[@]} | sed 's/ //g')" _opt; do
        for ((i = 0; i <= ${#argument}; i++)); do
            match="$(echo ${argument[$i]} | cut -c1)"
            if [ "$match" == "$_opt" ]; then
                if [ "$(echo ${argument[$i]} | cut -c2)" == ":" ]; then
                    eval ${variable[$i]}="'$OPTARG'"
                else
                    eval ${variable[$i]}="true"
                fi
                break
            fi
        done
    done
}

debugoptions() {
get_filelist
get_host

boldfont " ### DEBUGGING ###\n\n"

echo " Host:      $host"
echo " Files:     $filelist"
echo " Directory: $fsdirectory"

}

pull_filesystem () {
    get_filelist;

    # READ HOST
    HOST=`cat ./host | egrep -v "#" | xargs` 
    if $debug; then echo -e "connecting to: $HOST\n"; fi

    # CREATE REMOTE TARBALL
    echo "creating $TARBALL in /tmp .."
    ssh $HOST -t tar -cpvz -C / -f /tmp/$TARBALL $FILES
    if $debug; then waitkey; fi

    # COPY TARBALL
    echo -e "\ncopying file .."
    scp $HOST:/tmp/$TARBALL ./ && ssh $HOST -qt rm -f /tmp/$TARBALL
    if $debug; then waitkey; fi

    # EXTRACT TARBALL
    echo -e "\nextracting locally ..\n
    NOTE: this command needs root permissions to keep all original file ownerships!
          otherwise the device might become inaccessible upon restoration via ./pushfs\n"
    if [ ! -d ./filesystem/ ]; then sudo mkdir ./filesystem/; fi
    sudo tar --same-owner -xpvz -C filesystem/ -f $TARBALL && rm $TARBALL || echo "error extracting. tarball remains."

}

### PUSHFS ###
##############

push_filesystem () {
# script uploads files in ./filesystem/ to ./host

    # only use 'true' or 'false' here .. this is not failsafe. 
    debug=false
    waitkey() (read -rsp $'Press any key to continue...\n' -n1 key)

    # GENERATE TIMESTAMP
    TIMESTAMP=`date +%Y%h%d-%H%M%s` && echo -e "process timestamp: $TIMESTAMP\n" || exit 1
    TARBALL=tarball-$TIMESTAMP.tar.gz

    # MAKE LOCAL TARBALL
    echo -e "creating tarball ..\n
    NOTE: this command needs root permissions to keep all file ownerships and permissions
          otherwise your device might become inaccessible!\n"
    if [ "$(ls -A ./filesystem/)" ]; then
     sudo tar -cpvz -C filesystem/ -f $TARBALL .
     if $debug; then waitkey; fi
    else
     echo -e "no files found .. was looking for ./filesystem/*"
     exit 1
    fi

    # READ HOST
    HOST=`cat ./host | egrep -v "#" | xargs` 
    if $debug; then echo -e "\nconnecting to: $HOST"; fi

    # COPY TARBALL TO REMOTE
    echo -e "\ncopying tarball to remote /tmp .."
    scp ./$TARBALL $HOST:/tmp/ && rm -f ./$TARBALL
    if $debug; then waitkey; fi

    # EXTRACT REMOTELY
    echo -e "\nextracting $TARBALL in /tmp .."
    ssh $HOST -t "tar -xvz -C / -f /tmp/$TARBALL && rm -f /tmp/$TARBALL"
}

## main () {
echo -e "TARBALL: $tarball\n"
modeselektor $@
echo -n "OK"; yesno || exit 99
