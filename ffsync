#!/bin/bash

# Author:   anton@semjonov.de
# Date:     january 2016

default_listfile="./list"
default_hostfile="./host"
default_fsdir="filesystem"
export default_listfile default_hostfile default_fsdir

boldfont() { echo -en "\e[1m$@\e[0m"; } ## output arguments in bold font

yesno () { ## clean yes/no?
    echo -n " (y/n)? " 
    old_stty_cfg=$(stty -g); stty raw -echo
    answer=$( while ! head -c 1 | grep -i '[ny]' ; do true ; done )
    stty $old_stty_cfg
    if echo "$answer" | grep -iq "^y" ; then echo yes; return 0
    else echo no; return 1; fi
}

cat_the_crap() { ## parse a file and cut all comments (everything after a '#')
    test "$1" != "" && test -f "$1" || { echo "$1 does not exist." && exit 10 ;}
    cat "$1" | sed -r 's/(^| )#.*//' | xargs
}

modeselektor() { ## decide mode of operation
    export mode="$1" && shift
    case "$mode" in
        pull    )   pull_filesystem $@ ;;
        push    )   push_filesystem $@ ;;
        *       )   howdoiturnthison ;;
    esac
}

set_filelist() { ## set $filelist
    test "$optlistfile" != "" && if test -f "$optlistfile"; then 
        export default_listfile="$optlistfile"; else echo "$optlistfile does not exist" && exit 2; fi
    export filelist="$(cat_the_crap $default_listfile)"
    test "$filelist" = "" && echo "\$filelist is empty!!" && exit 3
}

set_host() { ## set $host
    test "$opthost" != "" && export host="$(echo $opthost | cut -d' ' -f1)" && return 0
    export host="$(cat_the_crap $default_hostfile | cut -d' ' -f1)"
    test "$host" = "" && echo "\$host is empty!!" && exit 4
}

set_fsdir() { ## set $fsdir
    if test "$optfsdir" != ""; then
        export optfsdir="$(echo $optfsdir | sed 's|[/]*$||')"
        if test -f "$optfsdir"; then
            echo "$optfsdir exists and is a file!!" && exit 5
        elif test -d "$optfsdir"; then
            echo -n "will use $optfsdir. (overwrites when pulling!) ok"
            yesno && export fsdir="$optfsdir" || exit 6
        else export fsdir="$optfsdir"; fi
    fi
    test "$fsdir" != "" || export fsdir="$default_fsdir"
}

set_variables() {
    set_host
    boldfont "Host:          " && echo "$host"

    set_fsdir
    boldfont "Directory:     " && echo "$(readlink -f "$fsdir")"

    test "$mode" = "pull" && {
        set_filelist
        boldfont "Files to pull: " && echo "$filelist"
    }

    echo -ne "\nOK"; yesno || exit 30
}

parse_args() { ## parse arguments as options
# define beforehand: >$ export parser_optlist=(1:one 2:two 3*three)
# where each option is: [X]{:/*}[...]
#       X   - option to look for
#       :/* - :additional argument or *only boolean
#       ... - name of variable to save to
#
# >$ parseargs -3 -1 "First Option" -2 SECOND
# .. would save "true" into a variable 'three', "First Option" into 'one'
#    and "SECOND" into 'two' when using above parser_optlist
    
    export parser_optlist=(h:opthost l:optlistfile d:optfsdir)

    for item in ${parser_optlist[@]}; do
        argument+=("$(echo $item | cut -c -2 | sed 's/*//')")
        variable+=("$(echo $item | cut -c 3-)")
    done; OPTIND=1;

    while getopts "$(echo ${argument[@]} | sed 's/ //g')" _opt; do
        for ((i = 0; i <= ${#argument}; i++)); do
            match="$(echo ${argument[$i]} | cut -c1)"
            if [ "$match" == "$_opt" ]; then
                if [ "$(echo ${argument[$i]} | cut -c2)" == ":" ];
                    then eval ${variable[$i]}="'$OPTARG'"
                    else eval ${variable[$i]}="true"
                fi; break
            fi
        done
    done
}

pull_filesystem() {
    parse_args $@
    set_variables

    test -d $fsdir || mkdir $fsdir

    boldfont "\nfetching files ..\n"
    # compresses to stdout remotely and pipes this to a local tar which extracts from stdin
    ssh $host "tar cpvzf - -C / $filelist" | tar xpzf - -C $fsdir
}

push_filesystem() { ## script uploads ALL files in $fsdir to $host
    parse_args $@
    set_variables

    test -d "$fsdir" || { echo "directory $fsdir does not exist." && exit 10 ;}
    test "$(ls -A "$fsdir" 2>/dev/null)" || { echo "directory $fsdir is empty." && exit 12 ;}

    boldfont "\npushing files ..\n"
    # compresses to stdout locally and pipes this to a remote tar which extracts from stdin
    tar cpzf - -C $fsdir . --owner=0 --group=0 | ssh $host "tar xvzf - -C /"
}

howdoiturnthison() { ## usage info
    echo "Use some cheats? I don't know ..."
}

## main () {
modeselektor $@
